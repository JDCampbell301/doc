# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, GeoNetwork opensource. Licensed under Creative Commons Attribution ShareAlike (Unported) v3.0 License
# This file is distributed under the same license as the GeoNetwork opensource package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GeoNetwork opensource 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-22 11:54+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:4
msgid "Implementing schema plugins"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:7
msgid "Metadata schemas and profiles"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:9
msgid "A metadata schema describes:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:11
msgid "the names, descriptions and any value codelists of the elements in the metadata schema"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:12
msgid "how the elements of the metadata schema are laid out in a metadata document (structure)"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:13
msgid "constraints on elements and content in a metadata document"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:14
msgid "documentation on how the elements of the metadata schema should be used"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:15
msgid "sample metadata documents and metadata templates"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:16
msgid "scripts to convert metadata documents to and from other metadata schemas"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:18
msgid "A metadata schema is usually an implementation of a metadata standard."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:20
msgid "A metadata profile is an adaptation of a metadata schema to suit the needs of a particular community. A metadata profile contains all the components of a metadata schema but may extend, restrict or redefine these components."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:26
msgid "Implementing a metadata schema or profile"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:28
msgid "There are many ways in which a metadata schema or profile can be implemented. This section will describe the way in which metadata schemas are implemented on https://github.com/geonetwork/schema-plugins or https://github.com/metadata101."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:32
msgid "Each metadata schema is a maven module implemented as a filesystem tree. The root of the tree is the name of the metadata schema in abbreviated form. The essential components of a metadata schema in the ``src/main/plugin/<schema_id>`` folder and are laid out as follows:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:37
msgid "**loc** directory with subdirectories for each three letter language code that this information is localized into, with the content in XML files (labels.xml, codelists.xml).  For example: ``loc/eng/codelists.xml`` describes the english codelists for metadata elements"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:41
msgid "**schema** directory and file named **schema.xsd** providing a single entry point to the XSD hierarchy.  For example: ``schema/gmd/gmd.xsd``"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:43
msgid "**schematron** directory has constraints on elements and content in a metadata document implemented using the ISO schematron language"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:45
msgid "**docs** directory has documentation on how the elements of the metadata schema should be used."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:47
msgid "**sample-data** directory has sample metadata documents"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:48
msgid "**convert** directory has XSLTs that convert metadata documents to and from other schemas"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:51
msgid "More information on the content of these directories and files will be given in the next section."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:56
msgid "Some schemas on https://github.com/geonetwork/schema-plugins or https://github.com/metadata101 have more information than described above because they have been implemented as GeoNetwork schema plugins."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:63
msgid "Schema Plugins"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:65
msgid "A schema plugin that can be used in GeoNetwork is a directory of stylesheets, XML schema descriptions (XSDs) and other information necessary for GeoNetwork to index, view and possibly edit content from XML metadata records."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:69
msgid "To be used in GeoNetwork, a schema directory can be manually placed in the ``schema_plugins`` sub directory of the GeoNetwork data directory. For some schema an additional JAR file should be added to the WEB-INF/lib folder. The default GeoNetwork data directory location is ``INSTALL_DIR/web/geonetwork/WEB-INF/data``."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:75
msgid "The contents of these schemas are parsed during GeoNetwork initialization. If valid, they will be available for use when GeoNetwork starts up."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:79
msgid "Schemas can also added to GeoNetwork dynamically if a zip archive of the schema directory is created and then uploaded to GeoNetwork in one of following ways using functions in the Administration menu:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:83
msgid "Server file path (specified using file chooser)"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:84
msgid "HTTP URL (eg. http://somehost/somedirectory/iso19139.mcp.zip)"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:85
msgid "As an online resource attached to an ISO19115/19139 metadata record"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:88
msgid "Uploaded schemas are also stored in the ``schema_plugins`` sub directory of the GeoNetwork data directory."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:94
msgid "A template module is available here https://github.com/geonetwork/schema-plugins/tree/develop/iso19139.xyz and is a good example to start with."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:99
msgid "Contents of a GeoNetwork schema"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:101
msgid "When installed, a GeoNetwork schema is a directory."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:103
msgid "The following subdirectories can be present in ``src/main/plugin/<schema_id>``:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:105
msgid "**schema**: (*Optional*) Directory containing the official XSDs of the metadata schema. If the schema is described by a DTD then this directory is optional. Note that schemas described by a DTD cannot be edited by GeoNetwork."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:108
msgid "**schematron**: (*Optional*) Directory containing the schematrons used to check conditions on content."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:110
msgid "**docs**: (*Optional*) Documentation about the schema"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:111
msgid "**index-fields**: (*Mandatory*) Directory of XSLT required to index metadata record."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:112
msgid "**loc**: (*Mandatory*) Directory of localized information: labels, codelists or schema specific strings. Eg. ``loc/eng/codelists.xml``"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:114
msgid "**convert**: (*Mandatory*) Directory of XSLTs to convert metadata from or to this schema. This could be to convert metadata to other schemas or to convert metadata from other schemas and formats to this schema. Eg. ``convert/oai_dc.xsl``"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:118
msgid "**layout**: (*Mandatory for version 3.x*) contains configuration for presenting metadata in the editor."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:120
msgid "**formatter**: (*Optional for version 3.x*) contains configuration for presenting metadata using Groovy or XSLT formatter."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:122
msgid "**present**: (*Mandatory for version 2.x*) contains XSLTs for presenting metadata in the viewer/editor."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:124
msgid "**present/csw**: (*Mandatory*) contains XSLTs for response to CSW requests for brief, summary and full records."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:126
msgid "**process**: (*Optional*) contains XSLTs for processing metadata elements by metadata suggestions mechanism (see **suggest.xsl** below)."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:128
msgid "**sample-data**: (*Optional*) Sample metadata for this schema. The metadata samples are in MEF format so that samples can have thumbnails or browse graphics as well as online resources."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:131
msgid "**templates**: (*Optional*) Directory containing template and subtemplate metadata records for this schema. Template metadata records are usually metadata records with the set of elements (and content) that will be used for a specific purpose. Eg. iso19139.mcp schema has a 'Minimum Element' template that has the mandatory elements for the schema and a example of the content that is expected."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:139
msgid "The following stylesheets can be present:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:141
msgid "**extract-date-modified.xsl**: (*Mandatory*) Extract the date of modification from the metadata record."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:143
msgid "**extract-gml.xsl**: (*Mandatory*) Extract the spatial extent from the metadata record as a GML GeometryCollection element."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:145
msgid "**extract-thumbnails.xsl**: (*Optional*) Extract the browse graphic/thumbnail from the metadata record."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:147
msgid "**extract-uuid.xsl**: (*Mandatory*) Extract the UUID of the metadata record."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:148
msgid "**extract-relations.xsl**: (*Optional*) Extract the associated resources of the metadata record (eg. online source, thumbnails)."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:150
msgid "**set-thumbnail.xsl**: (*Optional*) Set the browse graphic/thumbnail in the metadata record."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:152
msgid "**set-uuid.xsl**: (*Optional*) Set the UUID of the metadata record."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:153
msgid "**suggest.xsl**: (*Optional*) XSLT run by metadata suggestions service. The XSLT contains processes that can be registered and run on different elements of a metadata record. eg. expand keyword field with comma separated content into multiple keyword fields. See :ref:`metadata_suggestion` for more info."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:158
msgid "**unset-thumbnail.xsl**: (*Optional*) Remove the browse graphic/thumbnail from the metadata record."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:160
msgid "**update-child-from-parent-info.xsl**: (*Optional*) XSLT to specify which elements in a child record are updated from a parent record. Used to manage hierarchical relationships between metadata records."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:163
msgid "**update-fixed-info.xsl**: (*Optional*) XSLT to update 'fixed' content in metadata records."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:166
msgid "The following configuration files can be present:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:168
msgid "**oasis-catalog.xml**: (*Optional*) An oasis catalog describing any mappings that should be used for this schema eg. mapping URLs to local copies such as schemaLocations eg. http://www.isotc211.org/2005/gmd/gmd.xsd is mapped to ``schema/gmd/gmd.xsd``. Path names used in the oasis catalog are relative to the location of this file which is the schema directory."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:173
msgid "**schema.xsd**: (*Optional*) XML schema directory file that includes the XSDs used by this metadata schema. If the schema uses a DTD then this file should not be present. Metadata records from schemas that use DTDs cannot be edited in GeoNetwork."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:176
msgid "**schema-conversions.xml**: (*Optional*) XML file that describes the converters that can be applied to records belonging to this schema. This information is used to show these conversions as options for the user to choose when a metadata record belonging to this schema is shown in the search results."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:180
msgid "**schema-ident.xml**: (*Mandatory*) XML file that contains the schema name, identifier, version number and details on how to recognise metadata records that belong to this schema. This file has an XML schema definition in ``INSTALL_DIR/web/geonetwork/xml/validation/schemaPlugins/schema-ident.xsd`` which is used to validate it when the schema is loaded."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:185
msgid "**schema-substitutes.xml**: (*Optional*) XML file that redefines the set of elements that can be used as substitutes for a specific element."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:187
msgid "**schema-suggestions.xml**: (*Optional*) XML file that tells the editor which child elements of a complex element to automatically expand in the editor."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:191
msgid "In the ``index-fields`` folder, the following files are required:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:193
msgid "**default.xsl**: (*Mandatory*) Index the metadata record content in Lucene. Creates the Lucene document used by GeoNetwork to index the metadata record content."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:195
msgid "**language-default.xsl**: (*Optional*) Required to index multilingual metadata"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:199
msgid "To help in understanding what each of these components is and what is required, we will now give a step-by-step example of how to build a schemaPlugin for GeoNetwork."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:205
msgid "Preparation"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:207
msgid "In order to create a schema plugin for GeoNetwork, you should check out the source code:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:215
msgid "Then you could check out the schema plugin repository containing examples:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:223
msgid "To work with the example shown here, you should create your new schema plugin in a subdirectory of the schemas maven module (see :code:`schemas`). The ``iso19139.xyz`` plugin from the schema plugin repository could be a good start."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:228
msgid "Once created, you need to register your new plugin in the build of the application. To do this:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:231
msgid "Add the plugin as a module of the schemas module (see :code:`schemas/pom.xml`):"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:237
msgid "Register the plugin in the webapp in the ``copy-schemas`` execution (see :code:`web/pom.xml`):"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:247
msgid "Optionally register the dependency if you plugin implement custom Java (see :code:`web/pom.xml`):"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:260
msgid "Example - ISO19115/19139 Marine Community Profile (MCP)"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:262
msgid "The Marine Community Profile (MCP) is a profile of ISO19115/19139 developed for and with the Marine Community. The profile extends the ISO19115 metadata standard and is implemented using an extension of the XML implementation of ISO19115 described in ISO19139. Both the ISO19115 metadata standard and its XML implementation, ISO19139, are available through ISO distribution channels."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:268
msgid "The documentation for the Marine Community Profile can be found at http://www.aodc.gov.au/files/MarineCommunityProfilev1.4.pdf. The implementation of the Marine Community Profile as XML schema definitions is based on the approach described at https://www.seegrid.csiro.au/wiki/AppSchemas/MetadataProfiles. The XML schema definitions (XSDs) are available at the URL http://bluenet3.antcrc.utas.edu.au/mcp-1.4."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:274
msgid "Looking at the XML schema definitions, the profile adds a few new elements to the base ISO19139 standard. So the basic idea in defining a plugin Marine Community Profile schema for GeoNetwork is to use as much of the basic ISO19139 schema definition supplied with GeoNetwork as possible."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:279
msgid "We'll now describe in basic steps how to create each of the components of a plugin schema for GeoNetwork that implements the MCP."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:283
msgid "Creating the schema-ident.xml file"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:285
msgid "Now we need to provide the information necessary to identify the schema and metadata records that belong to the schema. The schema-ident.xml file for the MCP is as follows:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:327
msgid "Each of the elements is as follows:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:329
msgid "**name** - the name by which the schema will be known in GeoNetwork. If the schema is a profile of a base schema already added to GeoNetwork then the convention is to call the schema <base_schema_name>.<namespace_of_profile>."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:332
msgid "**id** - a unique identifier for the schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:333
msgid "**version** - the version number of the schema. Multiple versions of the schema can be present in GeoNetwork."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:335
msgid "**schemaLocation** - a set of pairs, where the first member of the pair is a namespace URI and the second member is the official URL of the XSD. The contents of this element will be added to the root element of any metadata record displayed by GeoNetwork as a schemaLocation/noNamespaceSchemaLocation attribute, if such as attribute does not already exist. It will also be used whenever an official schemaLocation/noNamespaceSchemaLocation is required (eg. in response to a ListMetadataFormats OAI request)."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:342
msgid "**autodetect** - contains elements or attributes (with content) that must be present in any metadata record that belongs to this schema. This is used during schema detection whenever GeoNetwork receives a metadata record of unknown schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:346
msgid "**filters** - (Optional) contains custom filter to be applied based on user privileges"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:349
msgid "After creating this file you can validate it manually using the XML schema definition (XSD) in ``INSTALL_DIR/web/geonetwork/xml/validation/schemaPlugins/schema-ident.xsd``. This XSD is also used to validate this file when the schema is loaded. If schema-ident.xml failes validation, the schema will not be loaded."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:357
msgid "More on autodetect"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:359
msgid "The autodetect section of schema-ident.xml is used when GeoNetwork needs to identify which metadata schema a record belongs to."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:362
msgid "The five rules that can be used in this section in order of evaluation are:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:364
msgid "**1. Attributes** - Find one or more attributes and/or namespaces in the document. An example use case is a profile of ISO19115/19139 that adds optional elements under a new namespace to gmd:identificationInfo/gmd:MD_DataIdentification. To detect records that belong to this profile the autodetect section in the schema-ident.xml file could look something like the following:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:378
msgid "Some other points about attributes autodetect:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:380
msgid "multiple attributes can be specified - all must be match for the record to be recognized as belonging to this schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:382
msgid "if the attributes have a namespace then the namespace should be specified on the autodetect element or somewhere in the schema-ident.xml document."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:385
msgid "**2. Elements** - Find one or more elements in the document. An example use case is the one shown in the example schema-ident.xml file earlier:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:410
msgid "Some other points about elements autodetect:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:412
msgid "multiple elements can be specified - eg. as in the above, both metadataStandardName and metadataStandardVersion have been specified - all must be match for the record to be recognized as belonging to this schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:415
msgid "multiple values for the elements can be specified. eg. as in the above, a match for gmd:metadataStandardVersion will be found for ``1.5-experimental`` OR ``MCP:BlueNet V1.5-experimental`` OR ``MCP:BlueNet V1.5`` - the vertical line or pipe character '|' is used to separate the options here. Regular expression can be used also."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:420
msgid "if the elements have a namespace then the namespace(s) should be specified on the autodetect element or somewhere in the schema-ident.xml document before the element in which they are used - eg. in the above there are there namespace declarations on the autodetect element so as not to clutter the content."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:426
msgid "**3. Root element** - root element of the document must match. An example use case is the one used for the eml-gbif schema. Documents belonging to this schema always have root element of eml:eml so the autodetect section for this schema is:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:439
msgid "Some other points about root element autodetect:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:441
msgid "multiple elements can be specified - any element in the set that matches the root element of the record will trigger a match."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:443
msgid "if the elements have a namespace then the namespace(s) should be specified on the autodetect element or somewhere in the schema-ident.xml document before the element that uses them - eg. as in the above there is a namespace declaration on the autodetect element for clarity."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:448
msgid "**4. Namespaces** - Find one or more namespaces in the document. An example use case is the one used for the csw:Record schema. Records belonging to the csw:Record schema can have three possible root elements: csw:Record, csw:SummaryRecord and csw:BriefRecord, but instead of using a multiple element root autodetect, we could use the common csw namespace for autodetect as follows:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:461
msgid "Some other points about namespaces autodetect:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:463
msgid "multiple namespaces can be specified - all must be present for the record to be recognized as belonging to this schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:465
msgid "the prefix is ignored. A namespace match occurs if the namespace URI found in the record matches the namespace URI specified in the namespaces autodetect element."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:469
msgid "**5. Default schema** - This is the fail-safe provision for records that don't match any of the installed schemas. The value for the default schema is specified in the appHandler configuration of the ``INSTALL_DIR/web/geonetwork/WEB-INF/config.xml`` config file or it could be a default specified by the operation calling autodetect (eg. a value parsed from a user bulk loading some metadata records). For flexibility and accuracy reasons it is preferable that records be detected using the autodetect information of an installed schema. The default schema is just a 'catch all' method of assigning records to a specific schema. The config element in ``INSTALL_DIR/web/geonetwork/WEB-INF/config.xml`` looks like the following:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:491
msgid "More on autodetect evaluation"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:493
msgid "The rules for autodetect are evaluated as follows:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:518
msgid "As an example, suppose we have three schemas iso19139.mcp, iso19139.mcp-1.4 and iso19139.mcp-cmar with the following autodetect elements:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:521
msgid "**iso19139.mcp-1.4:**"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:541
msgid "**iso19139.mcp-cmar:**"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:549
msgid "**iso19139.mcp:**"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:559
msgid "A record going through autodetect processing (eg. on import) would be checked against:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:561
msgid "iso19139.mcp-cmar first as it has an 'attributes' rule"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:562
msgid "then iso19139.mcp-1.4 as it has an 'elements' rules"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:563
msgid "then finally against iso19139.mcp, as it has a 'root element' rule."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:565
msgid "The idea behind this processing algorithm is that base schemas will use a 'root element' rule (or the more difficult to control 'namespaces' rule) and profiles will use a finer or more specific rule such as 'attributes' or 'elements'."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:572
msgid "More on filters"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:574
msgid "The goal is to add the capability to configure the download and dynamic operation based on the catalog content where they could have different meanings depending :"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:577
msgid "on the schema (eg. URL to a file for download is not located at the same place for dublin core and ISO19139)"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:579
msgid "on the record encoding rules (eg. download could be WFS links and not only uploaded file)."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:581
msgid "Filter configuration for each type of operation is defined in schema-ident.xml in the filters section."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:584
msgid "A filter define:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:586
msgid "an operation (which match canEdit, canDownload, canDynamic method in AccessManager)"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:588
msgid "an XPath to select elements to filter"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:589
msgid "an optional element definition to substitute the replaced element by (if a match is found this element attributes or children are inserted). This is used to highlight removed element."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:611
msgid "The filters are applied in XMLSerializer according to user privileges."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:616
msgid "After setting up schema-ident.xml, our new GeoNetwork plugin schema for MCP contains:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:625
msgid "Creating the schema-conversions.xml file"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:627
msgid "This file describes the converters that can be applied to metadata records that belong to the schema. Each converter must be manually defined as a GeoNetwork (Jeeves) service that can be called to transform a particular metadata record to a different schema. The schema-conversions.xml file for the MCP is as follows:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:654
msgid "Each converter has the following attributes:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:656
msgid "**name** - the name of the converter. This is the service name of the GeoNetwork (Jeeves) service and should be unique (prefixing the service name with xml_<schema_name> is a good way to make this name unique)."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:659
msgid "**nsUri** - the primary namespace of the schema produced by the converter. eg. xml_iso19139.mcpTorifcs transforms metadata records from iso19139.mcp to the RIFCS schema. Metadata records in the RIFCS metadata schema have primary namespace URI of http://ands.org.au/standards/rif-cs/registryObjects."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:663
msgid "**schemaLocation** - the location (URL) of the XML schema definition (XSD) corresponding to the nsURI."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:665
msgid "**xslt** - the name of the XSLT that actually carries out the transformation. This XSLT should be located in the convert subdirectory of the schema plugin."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:669
msgid "After setting up schema-conversions.xml, our new GeoNetwork plugin schema for MCP contains:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:675
msgid "::"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:672
msgid "schema-conversions.xml schema-ident.xml"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:680
msgid "Creating the schema directory and schema.xsd file"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:682
msgid "The schema and schema.xsd components are used by the GeoNetwork editor and validation functions."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:685
msgid "GeoNetwork's editor uses the XSDs to build a form that will not only order the elements in a metadata document correctly but also offer options to create any elements that are not in the metadata document. The idea behind this approach is twofold. Firstly, the editor can use the XML schema definition rules to help the user avoid creating a document that is structurally incorrect eg. missing mandatory elements or elements not ordered correctly. Secondly, the same editor code can be used on any XML metadata document with a defined XSD."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:693
msgid "If you are defining your own metadata schema then you can create an XML schema document using the XSD language. The elements of the language can be found online at http://www.w3schools.com/schema/ or you can refer to a textbook such as Priscilla Walmsley's Definitive XML Schema (Prentice Hall, 2002). GeoNetwork's XML schema parsing code understands almost all of the XSD language with the exception of redefine, any and anyAttribute (although the last two can be handled under special circumstances)."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:701
msgid "In the case of the Marine Commuity Profile, we are basically defining a number of extensions to the base standard ISO19115/19139. These extensions are defined using the XSD extension mechanism on the types defined in ISO19139. The following snippet shows how the Marine Community Profile extends the gmd:MD_Metadata element to add a new element called revisionDate:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:736
msgid "In short, we have defined a new element mcp:MD_Metadata with type mcp:MD_Metadata_Type, which is an extension of gmd:MD_Metadata_Type. By extension, we mean that the new type includes all of the elements of the old type plus one new element, mcp:revisionDate. A mandatory attribute (gco:isoType) is also attached to mcp:MD_Metadata with a fixed value set to the name of the element that we extended (gmd:MD_Metadata)."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:743
msgid "By defining the profile in this way, it is not necessary to modify the underlying ISO19139 schemas. So the schema directory for the MCP essentially consists of the extensions plus the base ISO19139 schemas. One possible directory structure is as follows:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:753
msgid "The extensions directory contains a single file mcpExtensions.xsd, which imports the gmd namespace. The remaining directories are the ISO19139 base schemas."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:757
msgid "The schema.xsd file, which is the file GeoNetwork looks for, will import the mcpExtensions.xsd file and any other namespaces not imported as part of the base ISO19139 schema. It is shown as follows:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:779
#: ../../source/customizing-application/implementing-a-schema-plugin.rst:878
#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1614
#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1636
#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1709
msgid "At this stage, our new GeoNetwork plugin schema for MCP contains:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:787
msgid "Creating the extract-... XSLTs"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:789
msgid "GeoNetwork needs to extract certain information from a metadata record and translate it into a common, simplified XML structure that is independent of the metadata schema. Rather than do this with Java coded XPaths, XSLTs are used to process the XML and return the common, simplified XML structure."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:794
msgid "The three xslts we'll create are:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:796
msgid "**extract-date-modified.xsl** - this XSLT processes the metadata record and extracts the date the metadata record was last modified. For the MCP, this information is held in the mcp:revisionDate element which is a child of mcp:MD_Metadata. The easiest way to create this for MCP is to copy extract-date-modified.xsl from the iso19139 schema and modify it to suit the MCP namespace and to use mcp:revisionDate in place of gmd:dateStamp."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:802
msgid "**extract-gml.xsl** - this XSLT processes the metadata record and extracts the spatial extent as a gml GeometryCollection element. The gml is passed to geotools for insertion into the spatial index (either a shapefile or a spatial database). For ISO19115/19139 and profiles, this task is quite easy because spatial extents (apart from the bounding box) are encoded as gml in the metadata record. Again, the easiest way to create this for the MCP is to copy extract-gml.xsd from the iso19139 schema ad modify it to suit the MCP namespace."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:811
msgid "An example bounding box fragment from an MCP metadata record is:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:836
msgid "Running extract-gml.xsl on the metadata record that contains this XML will produce:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:852
msgid "If there is more than one extent in the metadata record, then they should also appear in this gml:GeometryCollection element."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:855
msgid "To find out more about gml, see Lake, Burggraf, Trninic and Rae, \"GML Geography Mark-Up Language, Foundation for the Geo-Web\", Wiley, 2004."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:858
msgid "Finally, a note on projections. It is possible to have bounding polygons in an MCP record in a projection other than EPSG:4326. GeoNetwork transforms all projections known to GeoTools (and encoded in a form that GeoTools understands) to EPSG:4326 when writing the spatial extents to the shapefile or spatial database."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:864
msgid "**extract-uuid.xsl** - this XSLT processes the metadata record and extracts the identifier for the record. For the MCP and base ISO standard, this information is held in the gmd:fileIdentifier element which is a child of mcp:MD_Metadata."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:869
msgid "These xslts can be tested by running them on a metadata record from the schema. You should use the saxon xslt processor. For example:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:887
msgid "Creating the localized strings in the loc directory"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:889
msgid "The loc directory contains localized strings specific to this schema, arranged by language abbreviation in sub-directories."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:892
msgid "You should provide localized strings in whatever languages you expect your schema to be used in."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:895
msgid "Localized strings for this schema can be used in the presentation xslts and schematron error messages. For the presentation xslts:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:898
msgid "codelists for controlled vocabulary fields should be in loc/<language_abbreviation>/codelists.xml eg. ``loc/eng/codelists.xml``"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:900
msgid "label strings that replace XML element names with more intelligible/alternative phrases and rollover help strings should be in loc/<language_abbreviation>/labels.xml eg. ``loc/eng/labels.xml``."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:903
msgid "all other localized strings should be in loc/<language_abbreviation>/strings.xml eg. ``loc/eng/strings.xml``"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:906
msgid "Note that because the MCP is a profile of ISO19115/19139 and we have followed the GeoNetwork naming convention for profiles, we need only include the labels and codelists that are specific to the MCP or that we want to override. Other labels and codelists will be retrieved from the base schema iso19139."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:913
msgid "More on codelists.xml"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:915
msgid "Typically codelists are generated from enumerated lists in the metadata schema XSDs such as the following from http://www.isotc211.org/2005/gmd/identification.xsd for gmd:MD_TopicCategoryCode in the iso19139 schema:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:949
msgid "The following is part of the codelists.xml entry manually created for this element:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:981
msgid "The codelists.xml file maps the enumerated values from the XSD to a localized label and a description via the code element."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:984
msgid "A localized copy of codelists.xml is made available on an XPath to the presentation XSLTs eg. /root/gui/schemas/iso19139/codelist for the iso19139 schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:988
msgid "The XSLT metadata.xsl which contains templates used by all metadata schema presentation XSLTs, handles the creation of a select list/drop down menu in the editor and display of the code and description in the metadata viewer."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:992
msgid "The iso19139 schema has additional codelists that are managed external to the XSDs in catalog/vocabulary files such as http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml These have also been added to the codelists.xml file so that they can be localized, overridden in profiles and include an extended description to provide more useful information when viewing the metadata record."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:999
msgid "The iso19139 schema has additional templates in its presentation xslts to handlese codelists because they are specific to that schema. These are discussed in the section on presentation XSLTs later in this manual."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1004
msgid "More on labels.xml"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1006
msgid "A localized copy of labels.xml is made available on an XPath to the presentation XSLTs eg. /root/gui/schemas/iso19139/labels for the iso19139 schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1009
msgid "The ``labels.xml`` file can also be used to provide helper values in the form of a drop down/select list for free text fields. As an example:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1024
msgid "This would result in the Editor (through the XSLT metadata.xsl) displaying the credit field with these helper options listed beside it in a drop down/select menu something like the following:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1032
msgid "More on strings.xml"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1034
msgid "A localized copy of ``strings.xml`` is made available on an XPath to the presentation XSLTs eg. /root/gui/schemas/iso19139/strings for the iso19139 schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1037
msgid "After adding the localized strings, our new GeoNetwork plugin schema for MCP contains:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1047
msgid "Creating the presentations using formatter"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1051
msgid "See formatter section TODO for version 3.x"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1054
msgid "Customizing the editor"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1058
msgid "See editor configuration section TODO for version 3.x"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1062
msgid "Creating the presentations XSLTs in the present directory"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1067
msgid "Each metadata schema should contain XSLTs that display and possibly edit metadata records that belong to the schema. These XSLTs are held in the ``present`` directory."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1070
msgid "To be be used in the XSLT include/import hierarchy these XSLTs must follow a naming convention: metadata-<schema-name>.xsl. So for example, the presentation xslt for the iso19139 schema is ``metadata-iso19139.xsl``. For the MCP, since our schema name is iso19139.mcp, the presentation XSLT would be called ``metadata-iso19193.mcp.xsl``."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1076
msgid "Any XSLTs included by the presentation XSLT should also be in the present directory (this is a convention for clarity - it is not mandatory as include/import URLs can be mapped in the oasis-catalog.xml for the schema to other locations)."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1081
msgid "There are certain XSLT templates that the presentation XSLT must have:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1083
msgid "the **main** template, which must be called: metadata-<schema-name>. For the MCP profile of iso19139 the main template would look like the following (taken from metadata-iso19139.mcp.xsl):"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1101
#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1240
#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1319
#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1462
msgid "Analyzing this template:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1103
msgid "The name=\"metadata-iso19139.mcp\" is used by the main element processing template in metadata.xsl: elementEP. The main metadata services, show and edit, end up calling metadata-show.xsl and metadata-edit.xsl respectively with the metadata record passed from the Java service. Both these XSLTs, process the metadata record by applying the elementEP template from metadata.xsl to the root element. The elementEP template calls this main schema template using the schema name iso19139.mcp."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1107
msgid "The job of this main template is set to process all the elements of the metadata record using templates declared with a mode name that matches the schema name or the name of the base schema (in this case iso19139). This modal processing is to ensure that only templates intended to process metadata elements from this schema or the base schema are applied. The reason for this is that almost all profiles change or add a small number of elements to those in the base schema. So most of the metadata elements in a profile can be processed in the mode of the base schema. We'll see later in this section how to override processing of an element in the base schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1117
msgid "a **completeTab** template, which must be called: <schema-name>CompleteTab. This template will display all tabs, apart from the 'default' (or simple mode) and the 'XML View' tabs, in the left hand frame of the editor/viewer screen. Here is an example for the MCP:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1160
msgid "This template is called by the template named \"tab\" (which also adds the \"default\" and \"XML View\" tabs) in ``INSTALL_DIR/web/geonetwork/xsl/metadata-tab-utils.xsl`` using the schema name. That XSLT also has the code for the \"displayTab\" template."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1164
msgid "'mcpMinimum', 'mcpCore', 'complete' etc are the names of the tabs. The name of the current or active tab is stored in the global variable \"currTab\" available to all presentation XSLTs. Logic to decide what to display when a particular tab is active should be contained in the root element processing tab."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1169
msgid "a **root element** processing tab. This tab should match on the root element of the metadata record. For example, for the iso19139 schema:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1201
msgid "This template is basically a very long \"choose\" statement with \"when\" clauses that test the value of the currently defined tab (in global variable currTab). Each \"when\" clause will display the set of metadata elements that correspond to the tab definition using \"elementEP\" directly (as in the \"when\" clause for the 'identification' tab above) or via a named template (as in the 'metadata' tab above). For the MCP our template is similar to the one above for iso19139, except that the match would be on \"mcp:MD_Metadata\" (and the processing mode may differ - see the section 'An alternative XSLT design for profiles' below for more details)."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1211
msgid "a **brief** template, which must be called: <schema-name>Brief. This template processes the metadata record and extracts from it a format neutral summary of the metadata for purposes such as displaying the search results. Here is an example for the eml-gbif schema (because it is fairly short!):"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1242
msgid "The template matches on an element eml-gbifBrief, created by the mode=\"brief\" template in metadata-utils.xsl. The metadata record will be the first child in the /metadata XPath."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1245
msgid "Then process metadata elements to produce a flat XML structure that is used by search-results-xhtml.xsl to display a summary of the metadata record found by a search."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1249
msgid "Once again, for profiles of an existing schema, it makes sense to use a slighlty different approach so that the profile need not duplicate templates. Here is an example from metadata-iso19139.mcp.xsl:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1266
msgid "This template splits the processing between the base iso19139 schema and a brief template that handles elements specific to the profile. This assumes that:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1270
msgid "The base schema has separated the <metadata> element from the remainder of its brief processing so that it can be called by profiles"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1272
msgid "The profile includes links to equivalent elements that can be used by the base schema to process common elements eg. for ISO19139, elements in the profile have gco:isoType attributes that give the name of the base element and can be used in XPath matches such as \"gmd:MD_DataIdentification|*[@gco:isoType='gmd:MD_DataIdentification']\"."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1278
msgid "templates that match on elements specific to the schema. Here is an example from the eml-gbif schema:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1321
msgid "In view mode the individual keywords from the set are concatenated into a comma separated string with the name of the thesaurus in brackets at the end."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1324
msgid "In edit mode, the keywordSet is handled as a complex element ie. the user can add individual keyword elements with content and a single thesaurus name."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1326
msgid "This is an example of the type of processing that can be done on an element in a metadata record."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1329
msgid "For profiles, templates for elements can be defined in the same way except that the template will process in the mode of the base schema. Here is an example showing the first few lines of a template for processing the mcp:revisionDate element:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1349
msgid "If a template for a profile is intended to override a template in the base schema, then the template can be defined in the presentation XSLT for the profile with a priority attribute set to a high number and an XPath condition that ensures the template is processed for the profile only. For example in the MCP, we can override the handling of gmd:EX_GeographicBoundingBox in metadata-iso19139.xsl by defining a template in metadata-iso19139.mcp.xsl as follows:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1364
msgid "Finally, a profile may also extend some of the existing codelists in the base schema. These extended codelists should be held in a localized codelists.xml. As an example, in iso19139 these codelists are often attached to elements like the following:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1375
msgid "Templates for handling these elements are in the iso19139 presentation XSLT ``GEONETWORK_DATA_DIR/schema_plugins/iso19139/present/metadata-iso19139.xsl``. These templates use the name of the element (eg. gmd:CI_RoleCode) and the codelist XPath (eg. /root/gui/schemas/iso19139/codelists) to build select list/drop down menus when editing and to display a full description when viewing. See templates near the template named 'iso19139Codelist'. These templates can handle the extended codelists for any profile because they:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1383
msgid "match on any element that has a child element with attribute codeList"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1384
msgid "use the schema name in the codelists XPath"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1385
msgid "fall back to the base iso19139 schema if the profile codelist doesn't have the required codelist"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1388
msgid "However, if you don't need localized codelists, it is often easier and more direct to extract codelists directly from the ``gmxCodelists.xml`` file. This is in fact the solution that has been adopted for the MCP. The ``gmxCodelists.xml`` file is included in the presentation xslt for the MCP using a statement like:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1400
msgid "Check the codelist handling templates in ``metadata-iso19139.mcp.xsl`` to see how this works."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1403
msgid "An alternative XSLT design for profiles"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1405
msgid "In all powerful languages there will be more than one way to achieve a particular goal. This alternative XSLT design is for processing profiles. The idea behind the alternative is based on the following observations about the GeoNetwork XSLTs:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1410
msgid "All elements are initially processed by apply-templates in mode \"elementEP\"."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1411
msgid "The template \"elementEP\" (see ``INSTALL_DIR/web/geonetwork/xsl/metadata.xsl``) eventually calls the **main** template of the schema/profile."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1413
msgid "The main template can initially process the element in a mode particular to the profile and if this is not successful (ie. no template matches and thus no HTML elements are returned), process the element in the mode of the base schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1418
msgid "The advantage of this design is that overriding a template for an element in the base schema does not need the priority attribute or an XPath condition check on the schema name."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1422
msgid "Here is an example for the MCP (iso19139.mcp) with base schema iso19139:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1424
msgid "the **main** template, which must be called: metadata-iso19139.mcp.xsl:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1464
msgid "The name=\"metadata-iso19139.mcp\" is used by the main element processing template in metadata.xsl: elementEP. The main metadata services, show and edit, end up calling metadata-show.xsl and metadata-edit.xsl respectively with the metadata record passed from the Java service. Both these XSLTs, process the metadata record by applying the elementEP template from metadata.xsl to the root element. elementEP calls the appropriate main schema template using the schema name."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1471
msgid "The job of this main template is set to process all the elements of the metadata profile. The processing takes place in one of two modes. Firstly, the element is processed in the profile mode (iso19139.mcp). If a match is found then HTML elements will be returned and copied to the output document. If no HTML elements are returned then the element is processed in the base schema mode, iso19139."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1478
msgid "templates that match on elements specific to the profile have mode iso19139.mcp:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1490
msgid "templates that override elements in the base schema are processed in the profile mode iso19139.mcp"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1503
msgid "Notice that the template header of the profile has a simpler design than that used for the original design? Neither the priority attribute or the schema XPath condition is required because we are using a different mode to the base schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1508
msgid "To support processing in two modes we need to add a null template to the profile mode iso19139.mcp as follows:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1517
msgid "This template will match all elements that we don't have a specific template for in the profile mode iso19139.mcp. These elements will be processed in the base schema mode iso19139 instead because the null template returns nothing (see the main template discussion above)."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1522
msgid "The remainder of the discussion in the original design relating to tabs etc applies to the alternative design and is not repeated here."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1527
msgid "CSW Presentation XSLTs"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1529
msgid "The CSW server can be asked to provide records in a number of output schemas. The two supported by GeoNetwork are:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1532
msgid "**ogc** - http://www.opengis.net/cat/csw/2.0.2 - a dublin core derivative"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1533
msgid "**iso** - http://www.isotc211.org/2005/gmd - ISO19115/19139"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1535
msgid "From each of these output schemas, a **brief**, **summary** or **full** element set can be requested."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1538
msgid "These output schemas and element sets are implemented in GeoNetwork as XSLTs and they are stored in the 'csw' subdirectory of the 'present' directory. The ogc output schema XSLTs are implemented as ogc-brief.xsl, ogc-summary and ogc-full.xsl. The iso output schema XSLTs are implemented as iso-brief.xsl, iso-summary.xsl and iso-full.xsl."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1544
msgid "To create these XSLTs for the MCP, the best option is to copy and modify the csw presentation XSLTs from the base schema iso19139."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1547
msgid "After creating the presentation XSLTs, our new GeoNetwork plugin schema for MCP contains:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1558
msgid "Creating the index-fields.xsl to index content from the metadata record"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1560
msgid "This XSLT indexes the content of elements in the metadata record. The essence of this XSLT is to select elements from the metadata record and map them to lucene index field names. The lucene index field names used in GeoNetwork are as follows:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1566
msgid "Lucene Index Field Name"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1566
msgid "Description"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1568
msgid "abstract"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1568
msgid "Metadata abstract"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1569
msgid "any"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1569
msgid "Content from all metadata elements (for free text)"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1570
msgid "changeDate"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1570
msgid "Date that the metadata record was modified"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1571
msgid "createDate"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1571
msgid "Date that the metadata record was created"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1572
msgid "denominator"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1572
msgid "Scale denominator in data resolution"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1573
msgid "download"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1573
msgid "Does the metadata record have a downloadable resource attached?  (0 or 1)"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1574
msgid "digital"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1574
msgid "Is the metadata record distributed/available in a digital format?  (0 or 1)"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1575
msgid "eastBL"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1575
msgid "East bounding box longitude"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1576
msgid "keyword"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1576
msgid "Metadata keywords"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1577
msgid "metadataStandardName"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1577
msgid "Metadata standard name"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1578
msgid "northBL"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1578
msgid "North bounding box latitude"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1579
msgid "operatesOn"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1579
msgid "Uuid of metadata record describing dataset that is operated on by a service"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1580
msgid "orgName"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1580
msgid "Name of organisation listed in point-of-contact information"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1581
msgid "parentUuid"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1581
msgid "Uuid of parent metadata record"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1582
msgid "paper"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1582
msgid "Is the metadata record distributed/available in a paper format?  (0 or 1)"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1583
msgid "protocol"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1583
msgid "On line resource access protocol"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1584
msgid "publicationDate"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1584
msgid "Date resource was published"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1585
msgid "southBL"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1585
msgid "South bounding box latitude"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1586
msgid "spatialRepresentationType"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1586
msgid "vector, raster, etc"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1587
msgid "tempExtentBegin"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1587
msgid "Beginning of temporal extent range"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1588
msgid "tempExtentEnd"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1588
msgid "End of temporal extent range"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1589
msgid "title"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1589
msgid "Metadata title"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1590
msgid "topicCat"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1590
msgid "Metadata topic category"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1591
msgid "type"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1591
msgid "Metadata hierarchy level (should be dataset if unknown)"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1592
msgid "westBL"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1592
msgid "West bounding box longitude"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1595
msgid "For example, here is the mapping created between the metadata element mcp:revisionDate and the lucene index field changeDate:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1606
msgid "Notice that we are creating a new XML document. The Field elements in this document are read by GeoNetwork to create a Lucene document object for indexing (see the SearchManager class in the GeoNetwork source)."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1610
msgid "Once again, because the MCP is a profile of ISO19115/19139, it is probably best to modify ``index-fields.xsl`` from the schema iso19139 to handle the namespaces and additional elements of the MCP."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1624
msgid "Creating the sample-data directory"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1626
msgid "This is a simple directory. Put MEF files with sample metadata in this directory. Make sure they have a ``.mef`` suffix."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1629
msgid "A MEF file is a zip archive with the metadata, thumbnails, file based online resources and an info file describing the contents. The contents of a MEF file are discussed in more detail in the next section of this manual."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1633
msgid "Sample data in this directory can be added to the catalog using the Administration menu."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1646
msgid "Creating schematrons to describe MCP conditions"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1648
msgid "Schematrons are rules that are used to check conditions and content in the metadata record as part of the two stage validation process used by GeoNetwork."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1651
msgid "Schematron rules are created in the schematrons directory that you checked out earlier - see :ref:`preparation` above."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1654
msgid "An example rule is:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1675
msgid "As for most of GeoNetwork, the output of this rule can be localized to different languages. The corresponding localized strings are:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1700
msgid "Procedure for adding schematron rules, working within the schematrons directory:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1702
msgid "Place your schematron rules in 'rules'. Naming convetion is 'schematron-rules-<suffix>.sch' eg. ``schematron-rules-iso-mcp.sch``. Place localized strings for the rule assertions into 'rules/loc/<language_prefix>'."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1707
msgid "Schematron rules are compiled when the schema is loaded."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1719
msgid "Adding the components necessary to create and edit MCP metadata"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1721
msgid "So far we have added all the components necessary for GeoNetwork to identify, view and validate MCP metadata records. Now we will add the remaining components necessary to create and edit MCP metadata records."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1725
msgid "We'll start with the XSLTs that set the content of various elements in the MCP metadata records."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1729
msgid "Creating set-uuid.xsl"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1731
msgid "**set-uuid.xsl** - this XSLT takes as a parameter the UUID of the metadata record and writes it into the appropriate element of the metadata record. For the MCP this element is the same as the base ISO schema (called iso19139 in GeoNetwork), namely gmd:fileIdentifier. However, because the MCP uses a different namespace on the root element, this XSLT needs to be modified."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1739
msgid "Creating the extract, set and unset thumbnail XSLTs"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1741
msgid "If your metadata record can have a thumbnail or browse graphic link, then you will want to add XSLTs that extract, set and unset this information so that you can use the GeoNetwork thumbnail editing interface."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1745
msgid "The three XSLTs that support this interface are:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1747
msgid "**extract-thumbnails.xsl** - this XSLT extracts the thumbnails/browse graphics from the metadata record, turning it into generic XML that is the same for all metadata schemas. The elements need to have content that GeoNetwork understands. The following is an example of what the thumbnail interface for iso19139 expects (we'll duplicate this requirement for MCP):"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1783
msgid "When ``extract-thumbnails.xsl`` is run, it creates a small XML hierarchy from this information which looks something like the following:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1797
msgid "**set-thumbnail.xsl** - this XSLT does the opposite of extract-thumbnails.xsl. It takes the simplified, common XML structure used by GeoNetwork to describe the large and small thumbnails and creates the elements of the metadata record that are needed to represent them. This is a slightly more complex XSLT than extract-thumbnails.xsl because the existing elements in the metadata record need to be retained and the new elements need to be created in their correct places."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1804
msgid "**unset-thumbnail.xsl** - this XSLT targets and removes elements of the metadata record that describe a particular thumbnail. The remaining elements of the metadata record are retained."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1808
msgid "Because the MCP is a profile of ISO19115/19139, the easiest path to creating these XSLTs is to copy them from the iso19139 schema and modify them for the changes in namespace required by the MCP."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1813
msgid "Creating the update-... XSLTs"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1815
msgid "**update-child-from-parent-info.xsl** - this XSLT is run when a child record needs to have content copied into it from a parent record. It is an XSLT that changes the content of a few elements and leaves the remaining elements untouched. The behaviour of this XSLT would depend on which elements of the parent record will be used to update elements of the child record."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1821
msgid "**update-fixed-info.xsl** - this XSLT is run after editing to fix certain elements and content in the metadata record. For the MCP there are a number of actions we would like to take to 'hard-wire' certain elements and content. To do this the XSLT the following processing logic:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1832
msgid "Because the MCP is a profile of ISO19115/19139, the easiest path to creating this XSLT is to copy update-fixed-info.xsl from the iso19139 schema and modify it for the changes in namespace required by the MCP and then to include the processing we want."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1837
msgid "A simple example of MCP processing is to make sure that the gmd:metadataStandardName and gmd:metadataStandardVersion elements have the content needed to ensure that the record is recognized as MCP. To do this we can add two templates as follows:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1856
msgid "Processing by ``update-fixed-info.xsl`` can be enabled/disabled using the *Automatic Fixes* check box in the System Configuration menu. By default, it is enabled."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1860
msgid "Some important tasks handled in ``upgrade-fixed-info.xsl``:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1862
msgid "creating URLs for metadata with attached files (eg. onlineResources with 'File for download' in iso19139)"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1864
msgid "setting date stamp/revision date"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1865
msgid "setting codelist URLs to point to online ISO codelist catalogs"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1866
msgid "adding default spatial reference system attributes to spatial extents"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1868
msgid "A specific task required for the MCP ``update-fixed-info.xsl`` was to automatically create an online resource with a URL pointing to the metadata.show service with parameter set to the metadata uuid. This required some changes to the update-fixed-info.xsl supplied with iso19139. In particular:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1874
msgid "the parent elements may not be present in the metadata record"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1875
msgid "processing of the online resource elements for the metadata point of truth URL should not interfere with other processing of online resource elements"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1878
msgid "Rather than describe the individual steps required to implement this and the decisions required in the XSLT language, take a look at the ``update-fixed-info.xsl`` already present for the MCP schema in the iso19139.mcp directory and refer to the dot points above."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1885
msgid "Creating the templates directory"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1887
msgid "This is a simple directory. Put XML metadata files to be used as templates in this directory. Make sure they have a ``.xml`` suffix. Templates in this directory can be added to the catalog using the Administration menu."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1892
msgid "Editor behaviour: Adding schema-suggestions.xml and schema-substitutes.xml"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1894
msgid "**schema-suggestions.xml** - The default behaviour of the GeoNetwork advanced editor when building the editor forms is to show elements that are not in the metadata record as unexpanded elements. To add these elements to the record, the user will have to click on the '+' icon next to the element name. This can be tedious especially as some metadata standards have elements nested in others (ie. complex elements). The schema-suggestions.xml file allows you to specify elements that should be automatically expanded by the editor. An example of this is the online resource information in the ISO19115/19139 standard. If the following XML was added to the ``schema-suggestions.xml`` file:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1913
msgid "The effect of this would be that when an online resource element was expanded, then input fields for the protocol (a drop down/select list), name and description would automatically appear in the editor."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1917
msgid "Once again, a good place to start when building a ``schema-suggestions.xml`` file for the MCP is the ``schema-suggestions.xml`` file for the iso19139 schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1920
msgid "**schema-substitutes.xml** - Recall from the earlier :ref:`schema_and_schema_xsd` section, that the method we used to extend the base ISO19115/19139 schemas is to extend the base type, define a new element with the extended base type and allow the new element to substitute for the base element. So for example, in the MCP, we want to add a new resource constraint element that holds Creative Commons and other commons type licensing information. This requires that the MD_Constraints type be extended and a new mcp:MD_Commons element be defined which can substitute for gmd:MD_Constraints. This is shown in the following snippet of XSD:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1959
msgid "For MCP records, the GeoNetwork editor will show a choice of elements from the substitution group for gmd:MD_Constraints when adding 'Resource Constraints' to the metadata document. This will now include mcp:MD_Commons."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1965
msgid "Note that by similar process, two other elements, now deprecated in favour of MD_Commons, were also added as substitutes for MD_Constraints. If it was necessary to constrain the choices shown in this menu, say to remove the deprecated elements and limit the choices to just legal, security and commons, then this can be done by the following piece of XML in the schema-substitutes.xml file:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1980
msgid "The result of this change is shown below."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1984
msgid "Once again, a good place to start when building a schema-substitutes.xml file for the MCP is the schema-substitutes.xml file for the iso19139 schema."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1989
msgid "Adding components to support conversion of metadata records to other schemas"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1992
msgid "Creating the convert directory"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1994
msgid "If the new GeoNetwork plugin schema is to support on the fly translation of metadata records to other schemas, then the convert directory should be created and populated with appropriate XSLTs."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:1999
msgid "Supporting OAIPMH conversions"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:2001
msgid "The OAIPMH server in GeoNetwork can deliver metadata records from any of the schemas known to GeoNetwork. It can also be configured to deliver schemas not known to GeoNetwork if an XSLT exists to convert a metadata record to that schema. The file ``INSTALL_DIR/web/geonetwork/WEB-INF/config-oai-prefixes.xml`` describes the schemas (known as prefixes in OAI speak) that can be produced by an XSLT. A simple example of the content of this file is shown below:"
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:2016
msgid "In the case of the prefix oai_dc shown above, if a schema converter with prefix *oai_dc* exists in the ``schema-conversions.xml`` file of a GeoNetwork schema, then records that belong to this schema will be transformed and included in OAIPMH requests for the *oai_dc* prefix. See :ref:`schema_conversions` for more info."
msgstr ""

#: ../../source/customizing-application/implementing-a-schema-plugin.rst:2022
msgid "To add oai_dc support for the MCP, the easiest method is to copy oai_dc.xsl from the convert directory of the iso19139 schema, modify it to cope with the different namespaces and additional elements of the MCP and add it to the ``schema-conversions.xml`` file for the MCP."
msgstr ""

