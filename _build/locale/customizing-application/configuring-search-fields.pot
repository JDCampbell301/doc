# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, GeoNetwork opensource. Licensed under Creative Commons Attribution ShareAlike (Unported) v3.0 License
# This file is distributed under the same license as the GeoNetwork opensource package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GeoNetwork opensource 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-22 11:54+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/customizing-application/configuring-search-fields.rst:4
msgid "Configuring search fields"
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:6
msgid "In some cases it's relevant to modify or extend the search fields of the metadata index. For example to add a field (which is then searchable or can be used in a default view) or change the content of the field is created from the metadata (indexation)."
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:8
msgid "The amount and type of fields for the whole index is managed in:"
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:10
msgid "Next in each schema-plugin you can define how the new field is filled from the metadata content in the file:"
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:14
msgid "`Lucene <http://lucene.apache.org/java/docs/index.html>`_ is the search engine used by GeoNetwork. All Lucene configuration is defined in WEB-INF/config-lucene.xml."
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:18
msgid "Add a search field"
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:20
msgid "Indexed fields are defined on a per schema basis on the schema folder (eg. WEB-INF/data/config/schema_plugins/iso19139/index-fields) in default.xsl file. This file define for each search criteria the corresponding element in a metadata record. For example, indexing the title of an ISO19139 record::"
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:30
msgid "Usually, if the field is only for searching and should not be displayed in search results the store attribute could be set to false."
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:33
msgid "Once the field added to the index, user could query using it as a search criteria in the different kind of search services. For example using::"
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:38
msgid "If user wants this field to be tokenized, it should be added to the tokenized section of config-lucene.xml::"
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:44
msgid "If user wants this field to be returned in search results for the search service, then the field should be added to the Lucene configuration in the dumpFields section::"
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:51
msgid "Boosting documents and fields"
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:52
msgid "Document and field boosting allows catalogue administrator to be able to customize default Lucene scoring in order to promote certain types of records."
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:55
msgid "A common use case is when the catalogue contains lot of series for aggregating datasets. Not promoting the series could make the series \"useless\" even if those records contains important content. Boosting this type of document allows to promote series and guide the end-user from series to related records (through the relation navigation)."
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:60
msgid "In that case, the following configuration allows boosting series and minor importance of records part of a series::"
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:69
msgid "The boost is a positive or negative float value."
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:71
msgid "This feature has to be used by expert users to alter default search behavior scoring according to catalogue content. It needs tuning and experimentation to not promote too much some records. During testing, if search results looks different while being logged or not, it could be relevant to ignore some internal fields in boost computation which may alter scoring according to current user. Example configuration::"
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:88
msgid "Boosting search results"
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:90
msgid "By default Lucene compute score according to search criteria and the corresponding result set and the index content. In case of search with no criteria, Lucene will return top docs in index order (because none are more relevant than others)."
msgstr ""

#: ../../source/customizing-application/configuring-search-fields.rst:95
msgid "In order to change the score computation, a boost function could be define. Boosting query needs to be loaded in classpath. A sample boosting class is available. RecencyBoostingQuery will promote recently modified documents::"
msgstr ""

